from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.ext import ContextTypes, filters
import httpx
import logging
import json
import os
from dotenv import load_dotenv
from app.core.config import settings
from fastapi import HTTPException

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = settings.BASE_URL
TELEGRAM_TOKEN = settings.TELEGRAM_TOKEN

# –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ TELEGRAM_TOKEN
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

class DomophoneBot:
    def __init__(self):
        if not TELEGRAM_TOKEN:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
        self.app = Application.builder().token(TELEGRAM_TOKEN).build()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))
        self.app.add_handler(CommandHandler("domofons", self.show_domofons))
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [[{"text": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "request_contact": True}]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=reply_markup
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/domofons - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤
‚Ä¢ üì∑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–æ–≤ —Å –∫–∞–º–µ—Ä
‚Ä¢ üö™ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–≤–µ—Ä–µ–π
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –≤—ã–∑–æ–≤–∞—Ö

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /domofons –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞
3. –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–æ–≤ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–µ–π
        """
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown'
        )

    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            phone = update.message.contact.phone_number
            if not phone.startswith('+'):
                phone = '+' + phone
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç 7XXXXXXXXXX
            phone = phone.replace('+', '')
            if phone.startswith('8'):
                phone = '7' + phone[1:]
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
            # –ü–æ–ª—É—á–∞–µ–º tenant_id –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            headers = {
                "x-api-key": settings.API_TOKEN,
                "Content-Type": "application/json"
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            url = f"{settings.API_URL}/check-tenant"
            payload = {"phone": int(phone)}
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: URL={url}, payload={payload}")
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    url,
                    headers=headers,
                    json=payload
                )
                
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                logger.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                
                if response.status_code == 200:
                    data = response.json()
                    tenant_id = data.get('tenant_id')  # –ü–æ–ª—É—á–∞–µ–º tenant_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    context.user_data['tenant_id'] = tenant_id
                    await update.message.reply_text(
                        "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /domofons –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤."
                    )
                else:
                    raise HTTPException(status_code=response.status_code, detail=response.text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    async def show_domofons(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤"""
        if 'tenant_id' not in context.user_data:
            await update.message.reply_text(
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
            return
            
        try:
            headers = {
                "x-api-key": settings.API_TOKEN,
                "Content-Type": "application/json"
            }
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä
            apartments_url = f"{settings.API_URL}/domo.apartment"
            params = {"tenant_id": context.user_data['tenant_id']}
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä: URL={apartments_url}, params={params}")
            
            async with httpx.AsyncClient() as client:
                apartments_response = await client.get(
                    apartments_url,
                    headers=headers,
                    params=params
                )
                
                if apartments_response.status_code != 200:
                    raise HTTPException(status_code=apartments_response.status_code, 
                                     detail=apartments_response.text)
                    
                apartments = apartments_response.json()
                keyboard = []
                
                # 2. –î–ª—è –∫–∞–∂–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ–ª—É—á–∞–µ–º –¥–æ–º–æ—Ñ–æ–Ω—ã
                for apartment in apartments:
                    domofons_url = f"{settings.API_URL}/domo.apartment/{apartment['id']}/domofon"
                    domofons_params = {"tenant_id": context.user_data['tenant_id']}
                    
                    domofons_response = await client.get(
                        domofons_url,
                        headers=headers,
                        params=domofons_params
                    )
                    
                    if domofons_response.status_code != 200:
                        continue
                        
                    domofons = domofons_response.json()
                    
                    for domofon in domofons:
                        location = domofon.get('location', {})
                        address = location.get('readable_address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                        porch = location.get('porch', '')
                        address_text = f"{address} (–ø–æ–¥—ä–µ–∑–¥ {porch})" if porch else address
                        
                        keyboard.append([
                            InlineKeyboardButton(
                                f"üì∑ {address_text}",
                                callback_data=f"snapshot_{domofon['id']}"
                            ),
                            InlineKeyboardButton(
                                f"üö™ –û—Ç–∫—Ä—ã—Ç—å",
                                callback_data=f"open_{domofon['id']}"
                            )
                        ])
                
                if keyboard:
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤: {str(e)}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        action, domofon_id = query.data.split('_')
        
        try:
            headers = {
                "x-api-key": settings.API_TOKEN,
                "Content-Type": "application/json"
            }
            
            if action == "snapshot":
                # –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã
                url = f"{settings.API_URL}/domo.domofon/urlsOnType"
                payload = {
                    "intercoms_id": [int(domofon_id)],
                    "media_type": ["JPEG"]
                }
                params = {"tenant_id": context.user_data['tenant_id']}
                
                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        url,
                        headers=headers,
                        json=payload,
                        params=params
                    )
                    
                    if response.status_code == 200:
                        urls = response.json()
                        if urls and urls[0].get('jpeg'):
                            await query.message.reply_photo(
                                urls[0]['jpeg'],
                                caption="üì∑ –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã"
                            )
                        else:
                            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∏–º–æ–∫")
                            
            elif action == "open":
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä—å
                url = f"{settings.API_URL}/domo.domofon/{domofon_id}/open"
                payload = {"door_id": 1}
                params = {"tenant_id": context.user_data['tenant_id']}
                
                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        url,
                        headers=headers,
                        json=payload,
                        params=params
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        await query.message.reply_text(data.get('msg', '‚úÖ –î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞'))
                    else:
                        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}")
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        await query.answer()

    async def check_api(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/")
                response.raise_for_status()
        except Exception as e:
            logger.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
            raise

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.app.run_polling()

if __name__ == '__main__':
    bot = DomophoneBot()
    bot.run() 